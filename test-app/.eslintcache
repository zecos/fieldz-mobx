[{"/home/zwhitchcox/dev/zecos/fieldz/test-app/src/index.tsx":"1","/home/zwhitchcox/dev/zecos/fieldz/test-app/src/reportWebVitals.ts":"2","/home/zwhitchcox/dev/zecos/fieldz/test-app/src/App.tsx":"3","/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/index.tsx":"4","/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/reportWebVitals.ts":"5","/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/App.tsx":"6","/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/util.ts":"7"},{"size":500,"mtime":1610152314777,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610152314777,"results":"10","hashOfConfig":"9"},{"size":1367,"mtime":1610482256896,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1611271487477,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1611271487477,"results":"14","hashOfConfig":"13"},{"size":2368,"mtime":1612647662469,"results":"15","hashOfConfig":"13"},{"size":401,"mtime":1611347196785,"results":"16","hashOfConfig":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"gjh2xo",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"pvvtxg",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/zwhitchcox/dev/zecos/fieldz/test-app/src/index.tsx",[],["34","35"],"/home/zwhitchcox/dev/zecos/fieldz/test-app/src/reportWebVitals.ts",[],"/home/zwhitchcox/dev/zecos/fieldz/test-app/src/App.tsx",[],"/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/index.tsx",[],["36","37"],"/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/reportWebVitals.ts",[],"/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/App.tsx",["38","39","40","41","42","43"],"import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite'\nimport { FieldView, FieldStore, FormStore, IFormStore } from 'fieldz-mobx'\nimport './App.scss';\nimport { toJS } from 'mobx';\n\nconst newTodoStore = new FieldStore({\n  name: 'newTodo',\n  init: \"mytodo\",\n  validate: (val: any) => {\n    if (val.length < 3) {\n      return \"Must be at least 3 characters long.\"\n    }\n  },\n})\nnewTodoStore.value = \"hello\"\n\nconst userFormStore = new FormStore({\n  username: {\n    validate: (val:any) => {\n      if (val.length < 3) {\n        return \"Must be at least 3 characters long.\"\n      }\n    }\n  },\n  password: \"\",\n})\nconst submitStore = new FormStore({\n  val1: {\n    init: \"\",\n    validate: () => \"there was an error\"\n  },\n  val2: \"\",\n  x() {\n    console.log('values', submitStore.values.camel)\n  },\n  submit(e) {\n    e.preventDefault()\n    console.log(\"submitting\")\n  }\n})\nconst {fields, actions} = submitStore\n\n\n\nfunction App() {\n\n  const [todos, setTodos] = useState<string[]>([])\n  const submit = () => {}\n  console.log(fields.val1.errors)\n  actions.x()\n  return (\n    <div className=\"App\">\n      <button onClick={() => {\n        userFormStore.values.kebab = {\n          username: \"zane\"\n        }\n      }}>\n        Click Me\n      </button>\n      {/* <FieldView store={newTodoStore} />\n      {newTodoStore.value}\n      <button onClick={() => newTodoStore.value = \"second\"}>\n        Change\n      </button>\n      <button onClick={newTodoStore.reset}>\n        Reset Todo\n      </button>\n      <button onClick={userFormStore.reset}>\n        Reset User\n      </button>\n\n      <FieldView store={newTodoStore}\n        onEnter={() => {\n          if (newTodoStore.errors) {\n            newTodoStore.touched = true\n            return\n          }\n          setTodos([\n            ...todos,\n            newTodoStore.value\n          ])\n          newTodoStore.reset()\n        }}/>\n      <ul>\n        {todos.map((todo, i) => <li key={i}>{todo}</li>)}\n      </ul> */}\n      {<FieldView store={submitStore.fields.val1} />}\n      <form className=\"user-form\">\n        <FieldView store={userFormStore.fields.username} spellCheck={false} />\n        <FieldView store={userFormStore.fields.password} type=\"password\" />\n        <button onClick={actions.submit}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default observer(App);\n","/home/zwhitchcox/dev/zecos/fieldz-mobx/test-app/src/util.ts",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":26},{"ruleId":"50","severity":1,"message":"54","line":3,"column":44,"nodeType":"52","messageId":"53","endLine":3,"endColumn":54},{"ruleId":"50","severity":1,"message":"55","line":5,"column":10,"nodeType":"52","messageId":"53","endLine":5,"endColumn":14},{"ruleId":"50","severity":1,"message":"56","line":48,"column":10,"nodeType":"52","messageId":"53","endLine":48,"endColumn":15},{"ruleId":"50","severity":1,"message":"57","line":48,"column":17,"nodeType":"52","messageId":"53","endLine":48,"endColumn":25},{"ruleId":"50","severity":1,"message":"58","line":49,"column":9,"nodeType":"52","messageId":"53","endLine":49,"endColumn":15},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'IFormStore' is defined but never used.","'toJS' is defined but never used.","'todos' is assigned a value but never used.","'setTodos' is assigned a value but never used.","'submit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]